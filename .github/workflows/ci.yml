name: CI Pipeline

on: 
  push:
  pull_request:
    branches: [main]

jobs:
  api_nest:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./api_nest
    strategy:
      matrix:
        node-version: [20.x]

    env:
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
      MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
      DATABASE_URL: ${{ secrets.CI_DATABASE_URL }}

    steps:
      - uses: actions/checkout@v5
      - name: User Node.js &{{ matrix.node-version }}
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
      
      - name: Cache Bun dependencies
        id: cache-bun
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Start services with Docker Compose
        run: docker compose -f docker-compose.yml up -d --wait

      - name: Show Docker container logs on failure
        if: failure()
        run: docker compose logs db

      - name: Install Dependencies
        run: bun install
      
      # - name: Run Linting
      #   run: bun run lint
      
      - name: Generate Prisma Client
        run: bunx prisma migrate dev --schema=./src/models/prisma/schema.prisma
      
      - name: Build Project
        run: bun run build

      - name: Run Tests
        run: bun run test

  frontend-next:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend-next
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - uses: actions/checkout@v5
      - name: User Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Install Dependencies
        run: bun install
      
      # - name: Run Linting
      #   run: bun run lint

      - name: Build Project
        run: bun run build

      - name: Run tests
        run: bun run test

  image_service:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./image_service

    strategy:
      matrix:
        python-version: ["3.12"]
    env:
      MINIO_ENDPOINT: ${{ secrets.MINIO_ENDPOINT }}
      MINIO_ROOT_USER: ${{ secrets.MINIO_ROOT_USER }}
      MINIO_ROOT_PASSWORD: ${{ secrets.MINIO_ROOT_PASSWORD }}
      MINIO_BUCKET: ${{ secrets.MINIO_BUCKET }}
      MONGO_HOST: ${{ secrets.MONGO_HOST }}
      MONGO_PORT: ${{ secrets.MONGO_PORT }}
      MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
      MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}

    steps:
      - uses: actions/checkout@v5
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Start services with Docker Compose
        run: docker compose -f docker-compose.yml up -d --wait

      - name: Cache uv dependencies
        id: cache-uv
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install uv and dependencies
        run: |
          pip install uv
          uv venv
          uv sync

      - name: Run Tests
        run: |
          source .venv/bin/activate
          pytest
